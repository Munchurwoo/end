<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="join.us.GoodJob.model.mapper.CompanyMapper">
	<insert id="registerCompanyMember" parameterType="companyMemberVO">
		insert into
		company_member(company_id,introduction,company_type,industry,sales,date_of_establishment,num_of_employees,picture_path)
		values(#{id}, #{introduction}, #{companyType}, #{industry}, #{sales}, #{dateOfEstablishment}, #{numOfEmployees}, #{picturePath})
	</insert>
	<insert id="registerMember" parameterType="companyMemberVO">
		insert into
		member(id,password,email,name,tel,member_type,address)
		values(#{id}, #{password}, #{email}, #{name}, #{tel}, 3, #{address})
	</insert>
	<select id="selectCompanyMember" parameterType="string" resultType="companyMemberVO">
		select m.id, m.email, m.name, m.address, m.tel, cm.introduction, cm.company_type, cm.industry, cm.sales, cm.date_of_establishment, cm.num_of_employees
		from company_member cm, member m
		where m.id=cm.company_id and m.id=#{value}
	</select>
	<update id="updateCompanyMember" parameterType="companyMemberVO">
		update company_member set introduction=#{introduction}, company_type=#{companyType}, industry=#{industry}, sales=#{sales}, date_of_establishment=#{dateOfEstablishment}, num_of_employees=#{numOfEmployees}
		where company_id=#{id}
	</update>
	<update id="updateMember" parameterType="companyMemberVO">
		update member set password=#{password}, email=#{email}, address=#{address}, tel=#{tel} where id=#{id}
	</update>
	<select id="myPageCompanyMember" resultType="companyMemberVO" parameterType="memberVO">
		select
		cm.company_id,m.password,m.name,m.address,m.tel,m.email,cm.introduction,
		cm.company_type,cm.industry,cm.sales,cm.date_of_establishment,cm.num_of_employees
		from member m , company_member cm
		where m.id=cm.company_id
		and m.id=#{id}
	</select>
	<!-- 181018 MIRI 일반회원, 기업회원 회원탈퇴 공통으로 묶음 -->
	<!-- <delete id="deleteCompanyMember" parameterType="string">
		delete from member where id=#{id}
	</delete> -->

	<select id="getAllCompanyList" resultType="companyMemberVO" parameterType="pagingBean">	
		select company_id, name, introduction
		from(select row_number() over(order by cm.company_id) as rnum, cm.company_id, m.name, cm.introduction
		from member m , company_member cm
		where m.id=cm.company_id
		) where rnum between #{startRowNumber} and #{endRowNumber}		
	</select>
	
	<select id="getAllCompanyListCount" resultType="int">
		select count(*)
		from member m , company_member cm
		where m.id=cm.company_id
	</select>
	
	
	<select id="detailCompanyInfo" resultType="companyMemberVO" parameterType="memberVO">
		select
		cm.company_id,m.password,m.name,m.address,m.tel,m.email,cm.introduction,
		cm.company_type,cm.industry,cm.sales,cm.date_of_establishment,cm.num_of_employees
		from member m , company_member cm
		where m.id=cm.company_id
		and m.id=#{id}
	</select>
	
	<!-- 구인공고등록 -->
	<insert id="registerJobPosting" parameterType="jobPostingVO" >
		<selectKey keyProperty="jobPostingNum" resultType="int" order="BEFORE" >
			select job_posting_num_seq.nextval from dual
		</selectKey>		
		
		insert into JOB_POSTING(job_posting_num, company_id, career_status, title, content) 
		values(#{jobPostingNum}, #{companyId}, #{careerStatus}, #{title}, #{content})
	</insert>
	
	<insert id="registerJobPostingAcademic" parameterType="map">
		insert into job_academic(job_posting_num, academic_num)
		values(#{jobPostingNum}, #{academicNum})
	</insert>
	
	<insert id="registerJobPostingDev" parameterType="map">
		insert into job_dev(job_posting_num, dev_cat_num)
		values(#{jobPostingNum}, #{devCatNum})
	</insert>

	<insert id="registerJobPostingEmp" parameterType="map">
		insert into job_emp(job_posting_num, emp_type_num)
		values(#{jobPostingNum}, #{empTypeNum})
	</insert>
	
	<insert id="registerJobPostingLoc" parameterType="map">
		insert into job_loc(job_posting_num, loc_num)
		values(#{jobPostingNum}, #{locNum})
	</insert>
	
	<insert id="registerJobPostingRecuitment" parameterType="map">
		insert into job_recruitment(job_posting_num, rc_num)
		values(#{jobPostingNum}, #{rcNum})
	</insert>
	
	<resultMap type="companyMemberVO" id="companyMemberVORM">
		<result column="job_posting_num" property="jobPostingVO.jobPostingNum"/>
		<result column="career_status" property="jobPostingVO.careerStatus"/>
		<result column="title" property="jobPostingVO.title"/>
		<result column="content" property="jobPostingVO.content"/>
	</resultMap>
	<select id="jobPostingDetail" parameterType="string" resultMap="companyMemberVORM">
	select 
	cm.company_id, cm.introduction, cm.company_type, cm.industry, cm.sales, cm.date_of_establishment, cm.num_of_employees,
	j.job_posting_num, j.career_status, j.title, j.content, m.address, m.tel, m.email , m.name
	from job_posting j , company_member cm, member m
	where j.company_id = cm.company_id and cm.company_id=m.id
	and j.job_posting_num=#{jobPostingNum}
	</select>
	
	
	<select id="companyJobPostingList" resultType="jobPostingVO" parameterType="companyMemberVO">
		select 
		cm.company_id, cm.introduction, cm.company_type, cm.industry, cm.sales, cm.date_of_establishment, cm.num_of_employees,
		j.company_id, j.job_posting_num, j.career_status, j.title, j.content 
		from company_member cm , job_posting j
		where j.company_id = cm.company_id
		and j.company_id=#{companyId}
	</select>
	
	<resultMap type="companyMemberVO" id="companyMemberVORM2">
		<result column="job_posting_num" property="jobPostingVO.jobPostingNum"/>
		<result column="career_status" property="jobPostingVO.careerStatus"/>
		<result column="title" property="jobPostingVO.title"/>
		<result column="content" property="jobPostingVO.content"/>
	</resultMap>
	<select id="getAllJobPostingList" resultMap="companyMemberVORM2">
	select company_id, introduction, company_type, industry, sales, date_of_establishment, num_of_employees,
	job_posting_num, career_status, title, content, address, tel, email , name 
	from
	(select row_number() over(order by j.job_posting_num) as rnum,
	cm.company_id, cm.introduction, cm.company_type, cm.industry, cm.sales, cm.date_of_establishment, cm.num_of_employees,
	j.job_posting_num, j.career_status, j.title, j.content, m.address, m.tel, m.email , m.name
	from job_posting j , company_member cm, member m
	where j.company_id = cm.company_id and cm.company_id=m.id) 
	where rnum between #{startRowNumber} and #{endRowNumber}
	</select>
	
	<select id="getAlljobPostingCount" resultType="int">
		select count(*)
		from job_posting j , company_member cm, member m
		where j.company_id = cm.company_id and cm.company_id=m.id
	</select>
	
	<select id="getAllJobPostingListByJobPostingNum" resultMap="companyMemberVORM2" parameterType="map">
	
	select 
	company_id, introduction, company_type, industry, sales, date_of_establishment, num_of_employees,
	job_posting_num, career_status, title, content, address, tel, email , name
	from
	 (select row_number() over(order by j.job_posting_num) as rnum, cm.company_id, cm.introduction, cm.company_type, cm.industry, cm.sales, cm.date_of_establishment, cm.num_of_employees,
	j.job_posting_num, j.career_status, j.title, j.content, m.address, m.tel, m.email , m.name
	from job_posting j , company_member cm, member m
	where j.company_id = cm.company_id and cm.company_id=m.id 
	
	<!-- jobPostingNumList null 일 경우 처리 10-23 철우  -->
	and	j.job_posting_num in 
	<foreach collection="jobPostingNumList" item="jobPostingNumList" open="(" separator="," close=")">
		#{jobPostingNumList}
	</foreach>
	) <!-- 서브쿼리 from 종료	cherwoo -->
	where rnum between #{pagingBean.startRowNumber} and #{pagingBean.endRowNumber}
	</select>
	
	<select id="getAllJobPostingListByJobPostingNumCount" resultType="int">
	select count(*)
	from job_posting j , company_member cm, member m
	where j.company_id = cm.company_id and cm.company_id=m.id 
	<!-- 기업상세검색, paging 처리 10-23 cherwoo 수정 절대 금지 -->
	<foreach collection="list" item="jobPostingNum">
	<if test="jobPostingNum != null" >
	and	j.job_posting_num in
		<foreach collection="list" item="jobPostingNum" open="(" separator="," close=")">
		#{jobPostingNum}
		</foreach>
	</if>
	</foreach>
	</select>
	
	<select id="findJobPostingByCatNumList" parameterType="map" resultType="string">
	select distinct job_posting_num
		from( 
		   select jd.job_posting_num, jd.dev_cat_num, jr.rc_num,je.emp_type_num, jl.loc_num, ja.academic_num
		   from job_dev jd, job_recruitment jr , job_emp je, job_loc jl, job_academic ja
		   where jd.job_posting_num=jr.job_posting_num 
		   and jr.job_posting_num=je.job_posting_num
		   and je.job_posting_num=jl.job_posting_num	
		   and jl.job_posting_num=ja.job_posting_num
		 )
	
	<if test="locCatNumList != null">
	where loc_num in
	<foreach collection="locCatNumList" item="locCatNum" separator="," open="(" close=")">
		#{locCatNum}
	</foreach>
	</if>
	
	<if test="devCatNumList != null">
	and dev_cat_num in
	<foreach collection="devCatNumList" item="devCatNum" separator="," open="(" close=")">
		#{devCatNum}
	</foreach>
	</if>
	
	<if test="recruitCatNumList != null">
	and rc_num in
	 <foreach collection="recruitCatNumList" item="recruitCatNum" separator="," open="(" close=")">
		#{recruitCatNum}
	</foreach>
	</if>
	
	<if test="empTypeCatNumList != null">
	and emp_type_num in
	<foreach collection="empTypeCatNumList" item="empTypeCatNum" separator="," open="(" close=")">
		#{empTypeCatNum}
	</foreach>
	</if>
	
	<if test="acaCatNumList != null">
	and academic_num in
	<foreach collection="acaCatNumList" item="acaCatNum" separator="," open="(" close=")">
		#{acaCatNum}
	</foreach>
	</if>
	
	</select>
	
	<select id="getJobPostingQAList" parameterType="string" resultType="questionAnswerVO">
		select qa.qa_num, qa.question, qa.answer
		from question_answer qa, job_posting jp
		where qa.job_posting_num=jp.job_posting_num and jp.job_posting_num=#{value}
	</select>
	
	<select id="getJobPostingQAByQANum" parameterType="string" resultType="questionAnswerVO">
		select qa_num, question, answer from question_answer where qa_num=#{value}
	</select>
	
	<update id="updateQAToAnswer" parameterType="questionAnswerVO">
		update question_answer set answer=#{answer} where qa_num=#{qaNum}
	</update>
	
	<update id="deleteQAToAnswer" parameterType="questionAnswerVO">
		update question_answer set answer=null where qa_num=${value}
	</update>
	
	<resultMap type="interviewVO" id="interviewVORM">
		<result column="name" property="normalMemberVO.name"/>
		<result column="normal_id" property="normalMemberVO.id"/> 
	</resultMap>
	<select id="getAllInterviewerList" resultMap="interviewVORM">
		select i.interview_num,i.job_posting_num,i.title,nm.normal_id,m.name
		from interview i, normal_member nm , member m
		where i.normal_id = nm.normal_id and nm.normal_id = m.id
	</select>
</mapper> 		
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
















