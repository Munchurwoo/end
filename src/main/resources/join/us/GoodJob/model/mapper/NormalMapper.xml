<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="join.us.GoodJob.model.mapper.NormalMapper">
	<insert id="registerMember" parameterType="normalMemberVO">
		insert into
		member(id,password,email,name,tel,member_type,address)
		values(#{id},
		#{password}, #{email}, #{name}, #{tel}, 1, #{address})
	</insert>

	<!-- 181018 MIRI normal_member picture_path 삭제 -->
	<insert id="registerNormalMember" parameterType="normalMemberVO">
		insert into
		normal_member(normal_id,career_status,gender)
		values(#{id}, #{careerStatus}, #{gender})
	</insert>
	
	<!-- 181018 MIRI normal_member picture_path 삭제 -->
	<select id="selectNormalMember" parameterType="string" resultType="normalMemberVO">
		select m.id, m.password, m.email, m.name, m.address, m.tel,
		nm.gender, nm.career_status
		from normal_member nm, member m
		where nm.normal_id=m.id and m.id=#{normalId}
	</select>

	<update id="updateMember" parameterType="normalMemberVO">
		update member set
		password=#{password}, email=#{email}, address=#{address}, tel=#{tel}
		where id=#{id}
	</update>

	<!-- 181018 MIRI normal_member picture_path 삭제 -->
	<update id="updateNormalMember" parameterType="normalMemberVO">
		update normal_member set career_status=#{careerStatus} where normal_id=#{id}
	</update>
	
	<!-- 181018 MIRI 일반회원, 기업회원 회원탈퇴 공통으로 묶음  -->
	<!-- <delete id="deleteNormalMember" parameterType="string">
		delete from member where id=#{id}
	</delete> -->
	
	<!-- 181018 MIRI selectNormalMember와 중복되어 삭제 -->
	<!-- <select id="myPageNormalMember" resultType="normalMemberVO" parameterType="memberVO">
		select m.id,m.password,m.email,m.name,m.tel,m.address,m.member_type,nm.normal_id,nm.gender,nm.career_status
		from member m,normal_member nm
		where m.id=nm.normal_id
		and m.id=#{id}
	</select> -->
	
	<insert id="insertPortfolio" parameterType="portfolioVO">
		insert into portfolio(normal_id, title, content, picture_path)
		values(#{normalId}, #{title}, #{content}, #{picturePath})
	</insert>
	
	<insert id="insertPortfolioFile" parameterType="map">
		insert into portfolio_file(file_num, normal_id, file_path)
		values(portfolio_file_seq.nextval, #{normalId}, #{filePath})
	</insert>
	
	<insert id="insertPortfolioAcademic" parameterType="map">
		insert into portfolio_academic(normal_id, academic_num)
		values(#{normalId}, #{academicNum})
	</insert>
	
	<insert id="insertPortfolioDev" parameterType="map">
		insert into portfolio_dev(normal_id, dev_cat_num)
		values(#{normalId}, #{devCatNum})
	</insert>

	<insert id="insertPortfolioEmp" parameterType="map">
		insert into portfolio_emp(normal_id, emp_type_num)
		values(#{normalId}, #{empTypeNum})
	</insert>
	
	<insert id="insertPortfolioLoc" parameterType="map">
		insert into portfolio_loc(normal_id, loc_num)
		values(#{normalId}, #{locNum})
	</insert>
	
	<insert id="insertPortfolioRecuitment" parameterType="map">
		insert into portfolio_recruitment(normal_id, rc_num)
		values(#{normalId}, #{rcNum})
	</insert>

	<!-- 181019 MIRI normalDetailPortfolio와 중복되어 삭제 -->
	<!-- <select id="normalDetailPortfolioList" resultType="portfolioVO"
		parameterType="string">
		select title,content,picture_path
		from portfolio
		where
		normal_id=#{normalId}
	</select> -->
	
	<!-- 181018 MIRI normalId->value로 수정 -->
	<select id="normalDetailPortfolio" resultType="portfolioVO" parameterType="string">
		select normal_id,title, content, picture_path from portfolio where normal_id=#{normalId}
	</select>
	<select id="getAllPortfolioList" resultType="portfolioVO">

	</select>
	
	<select id="AllFindNomarMember" resultType="normalMemberVO">
		select m.id,m.password,m.email,m.name,m.tel,m.address,m.member_type,nm.normal_id,nm.gender,nm.career_status
		from member m,normal_member nm
		where m.id=nm.normal_id

	</select>

	<delete id="deletePortfolio" parameterType="string">
		delete from portfolio where normal_id=#{value}
	</delete>
	
	<resultMap type="normalMemberVO" id="normalMemberVORM">
		<result column="title" property="portfolio.title"/>
		<result column="content" property="portfolio.content"/>
		<result column="picture_path" property="portfolio.picturePath"/>
	</resultMap> 
	<select id="submitInterview" parameterType="string" resultMap="normalMemberVORM">
		select p.title,p.content,p.picture_path,n.normal_id,n.gender,n.career_status, m.name, m.tel, m.email, m.address
		from normal_member n, portfolio p , member m
		where n.normal_id = p.normal_id and n.normal_id = m.id
		and p.normal_id=#{value}
	</select>
	
	<update id="updatePortfolio" parameterType="portfolioVO">
		update portfolio set title=#{title}, content=#{content}, picture_path=#{picturePath} where normal_id=#{normalId}
	</update>
	
	<delete id="deletePortfolioMulti" parameterType="string">
		{
		call
		declare
		begin
		delete from portfolio_dev where normal_id=#{value};
		delete from
		portfolio_recruitment where normal_id=#{value};
		delete from
		portfolio_emp where normal_id=#{value};
		delete from portfolio_loc where
		normal_id=#{value};
		delete from portfolio_academic where
		normal_id=#{value};
		end
		}
	</delete>
	<!-- 인재 상세검색 처리 2018-10-22 AM 7:21 문철우 건들지 말아주세요. -->
	<select id="portfolioSearchList" parameterType="portfolioVO"
		resultType="string">
		select DISTINCT normal_id
		from(
		select pa.normal_id, pa.academic_num,
		pd.dev_cat_num, pe.emp_type_num,
		pl.loc_num
		from portfolio_academic pa,
		portfolio_dev pd, portfolio_emp pe,
		portfolio_loc pl
		where pa.normal_id
		= pd.normal_id
		and pd.normal_id = pe.normal_id
		and pe.normal_id =
		pl.normal_id
		)
		
		<if test="locCatNumList != null">
   		 where loc_num in
		<foreach item="locCatNumList" collection="locCatNumList" open="(" separator="," close=")">
			#{locCatNumList}
		</foreach>
 		 </if>
 		 
		<if test="acaCatNumList != null">
   		 and academic_num in
		<foreach item="acaCatNumList" collection="acaCatNumList" open="(" separator="," close=")">
			#{acaCatNumList}
		</foreach>
 		 </if>

		<if test="devCatNumList != null">
   		 and dev_cat_num in
		<foreach item="devCatNumList" collection="devCatNumList" open="(" separator="," close=")">
			#{devCatNumList}
		</foreach>
 		 </if>
 		 
 		 <if test="empTypeCatNumList != null">
   		 and emp_type_num in
		<foreach item="empTypeCatNumList" collection="empTypeCatNumList" open="(" separator="," close=")">
			#{empTypeCatNumList}
		</foreach>
 		 </if>

 		<!--  
		and dev_cat_num in
		<foreach item="devCatNumList" collection="list" open="(" separator="," close=")">
			#{devCatNumList}
		</foreach>
		and emp_type_num in
		<foreach item="empTypeCatNumList" collection="list" open="(" separator="," close=")">
			#{empTypeCatNumList}
		</foreach>
		and loc_num
		<foreach item="locCatNumList" collection="list" open="(" separator="," close=")">
			#{locCatNumList}
		</foreach> -->
	</select>
	
	<insert id="interviewApply" parameterType="interviewVO">
		insert into interview(interview_num, normal_id, job_posting_num, title, content) 
		values (interview_num_seq.nextval, #{normalId},#{jobPostingNum},#{title},#{content})
	</insert>
</mapper>
